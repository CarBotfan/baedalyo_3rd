<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.beadalyo.lmy.order.OrderMapper">

    <!-- 여기부터 주문 추가 -->
    <!-- 메뉴 데이터를 한 번에 가져오는 쿼리 -->
    <select id="selectMenus" parameterType="java.util.List" resultType="Map">
        SELECT menu_pk, menu_name, menu_price
        FROM menu
        WHERE menu_pk IN
        <foreach item="menuPk" index="index" collection="list" open="(" separator="," close=")">
            #{menuPk}
        </foreach>
    </select>

    <!-- order 테이블에 데이터를 삽입하는 쿼리 -->
    <insert id="postOrderTable" keyProperty="orderPk" useGeneratedKeys="true">
        INSERT INTO `order`
        (order_user_pk, order_res_pk, order_price, order_request, payment_method)
        VALUES
        (#{orderUserPk}, #{orderResPk}, #{orderPrice}, #{orderRequest}, #{paymentMethod})
    </insert>

    <!-- order_menu에 데이터를 배치로 삽입하는 쿼리 -->
    <insert id="insertOrderMenuBatch" parameterType="java.util.List">
        INSERT INTO order_menu (order_pk, menu_pk, menu_name, menu_price)
        VALUES
        <foreach item="item" index="index" collection="list" separator=",">
            (
            #{item.orderPk},
            #{item.menuPk},
            #{item.menuName},
            #{item.menuPrice}
            )
        </foreach>
    </insert>

<!-- 여기부터 주문 완료 및 취소 -->
    <select id="selectOrderById">
        SELECT order_user_pk AS orderUserPk, order_res_pk AS orderResPk, order_price AS orderPrice, order_request AS orderRequest, payment_method AS paymentMethod
        FROM `order`
        WHERE order_pk = #{orderPk}
    </select>

    <select id="selectOrderMenusById">
        SELECT order_menu_pk AS orderMenuPk, menu_pk AS menuPk, menu_name AS menuName, menu_price AS menuPrice
        FROM order_menu
        WHERE order_pk = #{orderPk}
    </select>

    <insert id="insertDoneOrder" useGeneratedKeys="true" keyProperty="doneOrderPk">
        INSERT INTO done_order
        (user_pk, res_pk, order_price, order_request,  done_order_state, payment_method, canceller)
        VALUES
        (#{orderUserPk}, #{orderResPk}, #{orderPrice}, #{orderRequest}, #{orderState}, #{paymentMethod}, #{canceller})
    </insert>

    <select id="selectCancellerRole">
        SELECT user_role
        FROM user
        WHERE user_pk = #{UserPk}
    </select>

    <insert id="insertDoneOrderMenu">
        INSERT INTO done_order_menu
        (done_order_pk, menu_pk, menu_name, menu_price)
        VALUES
        <foreach collection="orderMenuEntities" item="item" separator=",">
            (#{item.doneOrderPk}, #{item.menuPk}, #{item.menuName}, #{item.menuPrice})
        </foreach>
    </insert>

    <delete id="deleteOrder">
        DELETE FROM `order`
        WHERE order_pk = #{orderPk}
    </delete>

    <!--여기부터 본인 주문 목록 가져오기-->
    <select id="selectOrdersByUserPk">
        SELECT
        o.order_pk AS orderPk,
        o.order_res_pk AS resPk,
        o.order_price AS orderPrice,
        o.order_state AS orderState,
        o.created_at AS createdAt
        FROM
        `order` o
        WHERE
        o.order_user_pk = #{userPk}
        ORDER BY o.created_at DESC
    </select>

    <!--여기부터 상점 주문 목록 가져오기-->
    <select id="selectNonConfirmOrdersByResPk">
        SELECT
        o.order_pk AS orderPk,
        o.order_res_pk AS resPk,
        o.order_price AS orderPrice,
        o.order_state AS orderState,
        o.created_at AS createdAt
        FROM
        `order` o
        WHERE
        o.order_res_pk = #{resPk} AND o.order_state = 1
        ORDER BY o.created_at DESC
    </select>

    <select id="selectConfirmOrdersByResPk">
        SELECT
        o.order_pk AS orderPk,
        o.order_res_pk AS resPk,
        o.order_price AS orderPrice,
        o.order_state AS orderState,
        o.created_at AS createdAt
        FROM
        `order` o
        WHERE
        o.order_res_pk = #{resPk} AND o.order_state = 2
        ORDER BY o.created_at DESC
    </select>

    <select id="selectMenuNames">
        SELECT menu_name
        FROM order_menu
        WHERE order_pk = #{orderPk}
    </select>

    <!--주문 정보 불러오기-->
    <select id="getOrderInfo">
        SELECT order_pk AS orderPk, order_user_pk AS userPk, order_res_pk AS resPk, order_price AS orderPrice
                , order_request AS orderRequest, order_state AS orderState, payment_method AS paymentMethod
                , created_at AS createdAt
        FROM `order`
        WHERE order_pk = #{orderPk}
    </select>

    <select id="selectMenuInfo">
        SELECT menu_name AS MenuName, menu_price AS MenuPrice
        FROM order_menu
        WHERE order_pk = #{orderPk}
    </select>

    <!--주문 상태 변경(조리중으로)-->
    <update id="confirmOrder">
        UPDATE `order`
        SET order_state = 2
        WHERE order_pk = #{orderPk}
    </update>

    <select id="getResUserPkByOrderPk">
        SELECT res_user_pk
        FROM restaurant
        WHERE res_pk = (SELECT order_res_pk
                        FROM `order`
                        WHERE order_pk = #{orderPk})
    </select>

    <select id="getUserPkByOrderPk">
        SELECT order_user_pk
        FROM `order`
        WHERE order_pk = #{orderPk}
    </select>

    <select id="getResUserPkByResPk">
        SELECT res_user_pk
        FROM restaurant
        WHERE res_pk = #{resPk};
    </select>

    <select id="getOrderState">
        SELECT order_state
        FROM `order`
        WHERE order_pk = #{orderPk}
    </select>

    <select id="getResPkByUserPk">
        SELECT res_pk
        FROM restaurant
        WHERE res_user_pk = #{userPk}
    </select>
</mapper>